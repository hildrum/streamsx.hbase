<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<srcCode:sourceModel xmlns:srcCode="http://www.ibm.com/xmlns/prod/streams/spl/sourceCode" xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <srcCode:sourceFile uri="com.ibm.streamsx.hbase/overview.spl">
    <srcCode:compilationUnit>
      <srcCode:splDoc>
        <srcCode:description>
          <srcCode:description>A set of operators for writing to and reading from Apache HBASE.

These operators attempt to follow the HBASE interface as closely
as is feasible to give the developer maximum flexibility in interacting
with HBASE.

HBASE is a BigTable-like key-value store build on top of HDFS.  Tables
are partitioned by rows across clusters.  

An value in an HBASE table is accessed with row, columnFamily, 
columnQualifier, and timestamp.  Usually the timestamp is 
left out, and only the latest value is returned.  This toolkit currently
provides no support related to timestamps.

The columnFamily and columnQualifier can collectively be thought of as 
a column and are sometimes called that in the APIs.  The separation of the 
column into two parts allows for some extra flexibility: the columnFamilies 
must be defined when the table established and may be limited, but new 
columnQualifiers can be added at runtime and there is no limit to their number.

For some operators, such as [HBASEPut], the row, columnFamily, columnQualifer,
and value must all be specified.  For other operators, such as [HBASEGet] and 
[HBASEDelete], the behavior depends on exactly which of those are specified.
[HBASEDelete], for example, will delete the whole row if columnFamily and 
columnQualifier are not specified, but can also be used to delete only a single
value.

The columnFamily and columnQualifier (when relevant) may either be specified as
an attribute of the input tuple (columnFamilyAttrName, columnQualifierAttrName), or
specified as a single string to be used for all tuples (staticColumnFamily, 
staticColumnQualifier).  The the row and the value (when needed) come from the 
input tuple.

Please see the individual operators for details:
* [HBASEPut] Put a tuple into HBASE.
* [HBASEGet] Get a value, the set of values in a row-columnFamily-columnQualifier triple, or
the set of values in a row-columnFamily, or all values in a named row.
* [HBASEScan] Scan the entire table, getting all rows.  The scan can be limited to a particular
set of rows and to a particular set of columnFamilies or columnFamily-columnQualifier combos.
* [HBASEIncrement] Increment an entry.  The increment can come from the tuple or an operator parameter.
* [HBASEDelete] Delete a row, a columnFamily within a row, or a columnFamily-columnQualifier in a row.

HBASE supports locking via a check-and-update mechanism for delete and put.  This only locks within a single
row, but allows the user to specify either
* a full entry (row, columnFamily, columnQualifier, value), if this entry exists with the given value, make the pure or delete.
* a partial entry (row, columnFamily, columnQualifier): if there is no value, make the update.

(Note that the row of the put or delete and the row of the check must be the same.)
These are supported by [HBASEPut] and [HBASEDelete] by specifying a checkAttrName as a parameter.
This attribute on the input stream must be of type tuple and have an attribute of columnFamily and
columnQualifier (with a value if doin the first type of check).  In this mode, the operator can
have an output port with a success attribute to indicate whether the put or delete happened.

Except for HBASEIncrement and HBASEGet, the only types currently supported are rstrings.  HBASEGet supports
getting a value of type long.  

The sample applications were constructed to demonstrate the various use cases.

</srcCode:description>
        </srcCode:description>
      </srcCode:splDoc>
      <srcCode:splNamespace column="11" line="62" name="com.ibm.streamsx.hbase"/>
    </srcCode:compilationUnit>
  </srcCode:sourceFile>

  <srcCode:sourceFile uri="GettingStarted.spl">
    <srcCode:compilationUnit/>
  </srcCode:sourceFile>

</srcCode:sourceModel>
